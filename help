# ВВОД ВЫВОД
print() - вывод данных
input() - ввод данных

Пример
a = int(input('Введите а: ')) # 11
b = int(input('Введите b: ')) # 22
c = 33
print('{} + {} = {}'.format(a, b, c))

a, b, c = 1, 2, 3
# a: 1 b: 2 c: 3
print('a: {} b: {} c: {}'.format(a, b, c))
range(*(1,5,2)))

# IF-ELSE
Управляющие конструкции: if, if-else
username = input('Введите имя: ')
if(username == 'Маша'):
 print('Ура, это же МАША!');
else:
 print('Привет, ', username);

 username = input('Введите имя: ')
if username == 'Маша':
 print('Ура, это же МАША!')
elif username == 'Марина':
 print('Я так ждала Вас, Марина!')
elif username == 'Ильнар':
 print('Ильнар - топ)')
else:
 print('Привет, ', username)

 # WHILE
 Управляющие конструкции: while-else
original = 23
inverted = 0
while original != 0:
 inverted = inverted * 10 + (original % 10)
 original //= 10
else:
 print('Пожалуй')
 print('хватит )')
print(inverted)
# Пожалуй
# хватит )
# 32

# RANGE
Управляющие конструкции: for
r = range(5) # range(0, 5)
r = range(2, 5) # range(2, 5)
r = range(-5, 0) # range(-5, 0)
r = range(1, 10, 2) # range(1, 10, 2)
r = range(100, 0, -20) # range(100, 0, -20) / старт стоп шаг

# СТРОКИ
Немного о строках
text = 'съешь ещё этих мягких французских булок'
print(len(text)) # 39
print('ещё' in text) # True
print(text.isdigit()) # False
print(text.islower()) # True
print(text.replace('ещё','ЕЩЁ')) #
for c in text:
 print(c)

# СПИСКИ
 Списки: введение
colors = ['red', 'green', 'blue']
for e in colors:
 print(e) # red green blue
for e in colors:
 print(e*2) # redred greengreen blueblue
colors.append('gray') # добавить в конец
print(colors == ['red', 'green', 'blue', 'gray']) # True
colors.remove('red') #del colors[0] # удалить элемент

# ФУНКЦИИ
Функции
def f(x):
 return x**2
def f(x):
 if x == 1:
 return 'Целое'
 elif x == 2.3:
 return 23
 else:
 return
print(f(1)) # Целое
print(f(2.3)) # 23
print(f(28)) # None
print(type(f(1))) # str
print(type(f(2.3))) # int
print(type(f(28))) # NoneType

def f(x):
 return x**2
def f(x):
 if x == 1:
 return 'Целое'
 elif x == 2.3:
 return 23
 else:
 return
print(f(1)) # Целое
print(f(2.3)) # 23
print(f(28)) # None
print(type(f(1))) # str
print(type(f(2.3))) # int
print(type(f(28))) # NoneTyp

# РАБОТА С ФАЙЛАМИ
Файлы
Как работать с файлами:
Связать файловую переменную с файлом,
определив модификатор работы
a – открытие для добавления данных
r – открытие для чтения данных
w – открытие для записи данных
w+, r+

# Файлы
with open('file.txt', 'w') as data: # Если использовать with не надо закрывать файл после работы с ним
 data.write('line 1\n')
 data.write('line 2\n')
colors = ['red', 'green', 'blue']
data = open('file.txt', 'a')
data.writelines(colors) # разделителей не будет
data.close()
path = 'file.txt'
data = open(path, 'r')
for line in data:
 print(line)
data.close()

# РЕКУРСИЯ

Функции
def fib(n):
 if n in [1, 2]:
 return 1
 else:
 return fib(n-1) + fib(n-2)
list = []
for e in range(1, 10):
 list.append(fib(e))
print(list) # 1 1 2 3 5 8 13 21 34

# КОРТЕЖ
Кортежи
t = ()
print(type(t)) # tuple
t = (1,)
print(type(t)) # tuple
t = (1)
print(type(t)) # int
t = (28, 9, 1990)
print(type(t)) # tuple
colors = ['red', 'green', 'blue']
print(colors) # ['red', 'green', 'blue']
t = tuple(colors)
print(t) # ('red', 'green', 'blue')

# СЛОВАРИ
Словари
dictionary = {}
dictionary = \
 {
 'up': '↑',
 'left': '←',
 'down': '↓',
 'right': '→'
 }
print(dictionary) # {'up':'↑', 'left':'←', 'down':'↓', 'right':'→'}
print(dictionary['left']) # ←
# типы ключей могут отличаться
print(dictionary['up']) # ↑

# типы ключей могут отличаться
dictionary['left'] = '⇐'
print(dictionary['left']) # ⇐
#print(dictionary['type']) # KeyError: 'type'
del dictionary['left'] # удаление элемента
for item in dictionary: # for (k,v) in dictionary.items():
 print('{}: {}'.format(item, dictionary[item]))
# up: ↑
# down: ↓
# right: →

# МНОЖЕСТВА
Множества
Неупорядоченная совокупность элементов
a = {1, 2, 3, 5, 8}
b = {'2', '5', 8, 13, 21}
print(type(a)) # set
print(type(b)) # set

colors = {'red', 'green', 'blue'}
print(colors) # {'red', 'green', 'blue'}
colors.add('red')
print(colors) # {'red', 'green', 'blue'}
colors.add('gray')
print(colors) # {'red', 'green', 'blue','gray'}
colors.remove('red')
print(colors) # {'green', 'blue','gray'}
# colors.remove('red') # KeyError: 'red'
colors.discard('red') # ok
print(colors) # {'green', 'blue','gray'}
colors.clear() # { }
print(colors) # set()

# LAMBDA
Анонимные, lambda функции
def sum1(x):
 return x+22
def mult2(x):
 return x**3
sum1(mult2(2))
def sum3(x):
 return x+242
def mult4(x):
 return x**5
sum3(mult2(2))

sum = lambda x: x+10
mult = lambda x: x**2
sum(mult(2))
f(g(x))
def h(f, g, x): return f(g(x))h = lambda f, g, x: f(g(x))
h(sum, mult, 5)
h(lambda x: x+10, lambda x: x**2, 5)

def select(f, col):
 return [f(x) for x in col]
def where(f, col):
 return [x for x in col if f(x)]
data = '1 2 3 5 8 15 23 38'.split()
data = select(int, data)
data = where(lambda e: not e % 2, data)
data = list(select(lambda e: (e, e**2), data))

def select(f, col):
 return [f(x) for x in col]
def where(f, col):
 return [x for x in col if f(x)]
data = '1 2 3 5 8 15 23 38'.split()
data = select(int, data)
data = where(lambda e: not e % 2, data)
data = list(select(lambda e: (e, e**2), data))

# ФУНКЦИЯ MAP
Функция map
Функция map() применяет указанную функцию к
каждому элементу итерируемого объекта и
возвращает итератор с новыми объектами.
f(x) ⇒ x + 10
map(f, [ 1, 2, 3, 4, 5])
 ↓ ↓ ↓ ↓ ↓
 [ 11, 12, 13, 14, 15]
Нельзя пройтись дважды

# ФУНКЦИЯ FILTER
Функция filter
Функция filter() применяет указанную функцию к
каждому элементу итерируемого объекта и
возвращает итератор с теми объектами, для
которых функция вернула True.
f(x) ⇒ x - чётное
filter(f, [ 1, 2, 3, 4,5])
 ↓
 [ 2, 4 ]
Нельзя пройтись дважды

# ФУНКЦИЯ ZIP
Функция zip
Функция zip() применяется к набору итерируемых
объектов и возвращает итератор с кортежами из
элементов входных данных.
Количество элементов в результате равно минимальному количеству элементов входного набора
zip ([1, 2, 3], [ ‘о‘, ‘д‘, ‘т‘], [‘f’,’s’,’t’])
 ↓
[(1, 'о', 'f'), (2, 'д', 's'), (3, 'т', 't')]
Нельзя пройтись дважды

# ФУНКЦИЯ ENUMERATE
Функция enumerate
Функция enumerate() применяется к итерируемому
объекту и возвращает новый итератор с кортежами
из индекса и элементов входных данных.
enumerate(['Казань', 'Смоленск', 'Рыбки', 'Чикаго'])
 ↓
[(0, 'Казань'), (1, 'Смоленск'), (2, 'Рыбки'), (3, 'Чикаго')]
Нельзя пройтись дважды

# LIST COMPREHENSION
List Comprehension
[exp for item in iterable]
[exp for item in iterable (if conditional)]
[exp <if conditional> for item in iterable (if conditional)]
